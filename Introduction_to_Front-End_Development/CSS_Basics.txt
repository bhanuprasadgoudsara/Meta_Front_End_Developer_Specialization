SELECTING AND STYLING
For websites and web apps, HTML is the frame and structure.
CSS tells the web browser how to display HTML elements on screen. 
When using CSS, there are five elements you need to understand. 
- A declaration block starts with a left curly bracket and ends with the matching right curly bracket. 
- In between these curly brackets are the style declarations. 
- The first element of the CSS rule is the selector. This indicates which html element or elements we want to style. 
Structure of the declaration block.
- Each declaration is made up of two parts a property and a value. 
    In this case, 
    - h1 - selector. 
    - Color - property and 
    - gray - value of the property.
Did you know that you can add additional functionality by using extensions. If you click on the extensions tab, you can install the 'live preview' extension by Microsoft. If you are running VS code locally, you can install and use this extension. Once installed, right click on your html file in the explorer panel and select live preview => show preview. When you update an html file, you immediately notice the changes in visual studio code. 

how to create a CSS file and style some html elements.

Before I start styling elements, create a simple html document named index.html. 
To demonstrate how CSS works, I will use an example created previously.
Next I create a file named style.CSS.
For my web page to use the CSS file, I need to link it to the head element of the html file. 
To link to a style sheet, you use the 'link' tag which must be assigned to attributes 'rel' and 'href'. 
The 'rel' attribute is assigned to style sheet and the 'href' attribute is assigned to the name of the style sheet file. 
In this example, it's style.CSS. I am now ready to apply CSS to the index.html file using style rules that I will write in the style.CSS file.

So now what if I want to only style a single h1 element? I can add an ID attribute to the tag h1 that I want to style. And in my CSS file, I create a rule for that ID. Let's do that now. First, I create an ID rule using the '#' symbol and then the name 'h1'. Then I define the CSS properties of that rule to change the color value to green. 

You may be wondering, why does the first CSS rule not apply to the h1 element with the ID? This is because of something called CSS precedence and specificity. This is a complex statement, but basically the browser will use the most precise selector for an html element. 
CSS has a set of hierarchy rules which dictate which rule will apply to an element. In this example, the ID rule takes precedence over the html type selector rule. You can learn more about CSS selector rules and precedents from the additional reading at the end of this lesson. 
Q. When you create a CSS rule, the part inside the curly brackets is called the: 
- Declaration block - Correct
- Selector
- Value
- Property
Ans: Everything between the curly brackets is called the declaration  block.

DIFERENT TYPES OF SELECTORS
When styling a web page, there are many types of selectors available that allow developers to be as broad or as specific as they need to be when selecting HTML elements to apply CSS rules to.

Common CSS selectors that you will use as a developer:
1. Element Selectors: allows developers to select HTML elements based on their element type
    HTML:
        <p>Once upon a time...</p>
        <p>In a hidden land...</p>
    CSS:
        p {
            color: blue ;
        }

2. ID Selectors: uses the id attribute of an HTML element. Since the id is unique within a webpage, it allows the developer to select a specific element for styling. ID selectors are prefixed with a # character.
    HTML:
        <span id="latest">New!</span>
    CSS:
        #latest {
            background-color: purple ;
        }

3. Class Selectors: Elements can also be selected based on the class attribute applied to them. The CSS rule has been applied to all elements with the specified class name. The class selector is prefixed with a "." character. In the following example, the CSS rule applies to both elements as they have the navigation CSS class applied to them.
    HTML:
        <a class="navigation">Go Back</a>
        <p class="navigation">Go Forward</p>
    CSS:
        .navigation {
            margin: 2px ;
        }

4. Element with Class Selector: A more specific method for selecting HTML elements is by first selecting the HTML element, then selecting the CSS class or ID. The example below selects all p elements that have the CSS class introduction applied to them.
    HTML:
        <p class="introduction"></p>
    CSS:
        p.introduction {
            margin: 3px ;
        }

5. Descendant Selectors: useful if you need to select HTML elements that are contained within another selector.
    HTML:
        <div id="blog">
            <h1>Latest News</h1>
            <div>
                <h1>Today's Weather</h1>
                <p>The weather will be sunny</p>
            </div>
            <p>Subscribe for more news</p>
        </div>
        <div>
            <h1>Archives</h1>
        </div>
    CSS:
        #blog h1 {
            color : blue ;
        }
    The CSS rule will select all h1 elements that are contained within the element with the ID blog. 
    The CSS rule will not apply to the h1 element containing the text Archives.
    The structure of a descendant selector is a CSS selector, followed by a single space character, followed by another CSS selector.
    Multiple descendants can also be selected. 
    For example, to select all h1 elements that are descendants of div elements which are descendants of the blog element, the selector is specified as follows.
    CSS:
        #blog div h1 {
            color : blue ;
        }

6. Child Selectors: more specific than descendant selectors. They only select elements that are immediate descendants (children) of a selector (the parent).
    HTML:
        <div id="blog">
            <h1>Latest News</h1>
            <div>
                <h1>Today's Weather</h1>
                <p>The weather will be sunny</p>
            </div>
            <p>Subscribe for more news</p>
        </div>
    If you wanted to style the h1 element containing the text Latest News, you can use the following child selector:
    CSS:
        #blog > h1 {
            color : blue ;
        }
This will select the element with the ID blog (the parent), then it will select all h1 elements that are contained directly in that element (the children). 
The structure of the child selector is a CSS selector followed by the child combinator symbol > followed by another CSS selector.
Note : Child Selectors will not go beyond a single depth level. 
Therefore, the CSS rule will not be applied to the h1 element containing the text 'Today's Weather'.

8. :hover Pseudo-Class
A special keyword called a pseudo-class allows developers to select elements based on their state. 
Don't worry too much about what that means right now. 
For now, let's look at how the hover pseudo-class allows you to style an element when the mouse cursor hovers over the element.
The simplest example of this is changing the color of a hyperlink when it is hovered over. 
To do this, you add the :hover pseudo-class to the end of the selector. 
In the following example, adding :hover  to the a element will change the color of the hyperlink to orange when it is hovered over.
    CSS:
        a:hover {
            color : orange ;
        }
This pseudo-class is very useful for creating visual effects based on user interaction.

TEXT AND COLOR IN CSS
As you design websites, you'll be working a lot with colors and text. There are many different ways to display text and equally as many ways to define colors.
Color: used in many CSS properties.
CSS:
    p{
        color : blue ;
    }

From CSS Version 3, there are 5 main ways to reference a color.
1. By RGB value,
2. By RGBA value,
3. By HSL value,
4. By hex value and    
5. By predefined color names.

1. RGB value:
- RGB is a color model that adds the colors red (R), green (G) and blue (B) together to create colors. 
- This is based on how the human eye sees colors.
- Each value is defined as a number between 0 and 255, representing the intensity of that color.
- RGB value of color Red is 255,0,0  - since the intensity of the red color would be 100% while blue and green would be 0%.
- RGB value of color black is 0,0,0  
- RGB value of color white is 255,255,255
- When using RGB values in CSS, they can be defined using the 'rgb' keyword
CSS:
    p {
        color : rgb(255, 0, 0) ;
    }

2. RGBA value
- RGBA is an extension of RGB that add an alpha (A) channel. 
- The alpha channel represents the opacity, or transparency, of the color. 
- Similar to RGB, this is specified in CSS using the 'rgba' keyword
CSS:
    p {
        color : rgba(255, 0, 0, 0.8) ;
    }

3. HSL value:
- HSL is a newer color model defined as Hue (H), Saturation (S) and Lightness (L). 
- The aim of the model is to simplify mental visualization of the color that the value represents.
- Think of a rainbow that has been turned into a full circle. This represents the Hue. The Hue value is the degree value on this circle, from 0 degrees to 360 degrees. 0 is red, 120 is green and 240 is blue.
- Saturation is the distance from the center of the circle to its edge. The saturation value is represented by a percentage from 0% to 100% where 0% is the center of the circle and 100% is its edge. For example, 0% will mean that the color is more grey and 100% represents the full color.
- Lightness is the third element of this color model. Think of it as turning the circle into a 3D cylinder where the bottom of the cylinder is more black and toward the top is more white. Therefore, lightness is the distance from the bottom of the cylinder to the top. Again, lightness is represented by a percentage from 0% to 100% where 0% is the bottom of the cylinder and 100% is its top. In other words, 0% will mean that the color is more black and 100% is white.
- In CSS, you use the 'hsl' keyword to define a color with HSL.
CSS:
    p {
        color : hsl(0, 100%, 50%) ;
    }

4. Hex value
- Colors can be specified using a hexadecimal value. 
- If you're unfamiliar with hexadecimal, think of it as a different number set. Decimal is what you use every day. Digits range from 0 to 9 before tens and hundreds are used. Hexadecimal is similar, except it has 16 digits. This is counted as 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
- In fact, you can convert between decimal and hexadecimal. Decimal 10 is equal to hexadecimal A. Hexadecimal F is equal to decimal 15. Hexadecimal can also go to tens and hundreds. For example, decimal 16 is equal to hexadecimal 10, with 10 being the next number after F. It can be a little confusing at first but don't worry, there are plenty of converters available if you get stuck.
- Colors specified using hexadecimal are prefixed with a '#' symbol followed by the RGB value in hexadecimal format.
- For example, the color red which is RGB 255,0,0 would be written as hexadecimal #FF0000. Again don't worry if you get stuck, there are plenty of converters available for this too!

5. Predefined color names
- Modern web browsers support 140 predefined color names. 
- These color names are for convenience purposes and can be mapped to equivalent hex/RGB/HSL values.
- Some common color names available are listed below.
black
silver
gray
white
maroon
red
purple
fuchsia
green
lime
olive
yellow
navy
blue
teal
aqua

Text: With CSS there are many ways to change how text is displayed. 
most common text manipulation CSS properties.

1. Text Color: The color property sets the color of text. 
CSS:
    p {
        color : hsl(0, 100%, 50%) ;
    }

2. (A) Text Font: 
- There are many different fonts to display text on your computer. 
- In simple terms, a font is a collection of text characters written in a specific style and size.
- If you've used a word processor before, you're probably familiar with the fonts Times New Roman and Calibri.
- To set the font used by text in CSS you use the 'font-family' property.
CSS:
    p {
        font-family : "Courier New", monospace ;
    }

- Since computers vary in what fonts they have installed, it is recommended to include several fonts when using the font-family property. 
- These are specified in a fallback order, meaning that if the first font is not available, it will check for the second font. 
- If the second font is not available, then it will check for the third font and so on. 
- If none of the fonts are available, it will use the browser's default font.

2. (B) Text Size:
To set the size of the font, the 'font-size' property is used.
CSS:
    p {
        font-family : "Courier New", monospace ;
        font-size : 12px ;
    }

3. Text Transformation:
- Text transformation is useful if you want to ensure the correct capitalization of the text content. 
- In the example below, the CSS rule will change all text in paragraph elements to uppercase using the 'text-transform' property:
CSS:
    p {
        text-transform : uppercase ;
    }
- The most commonly used values for the text-transform property are:  
    - uppercase,  
    - lowercase,  
    - capitalize  and 
    - none. 
- The default value used is none, which means the text displays as it was written in the HTML document.

4. Text Decoration
- The text-decoration property is useful to apply additional decoration to text such as underlining and line-through (strikethrough).
CSS:
    p {
        text-decoration: underline ;
    }
- It is possible to set the color, thickness and styling of the decoration too. 
- In the example below, the underline will be a solid red line that is 5 pixels thick.
CSS:
    p {
        text-decoration: underline red solid 5px ;
    }
- If this is confusing, These properties can be individually set using 
    - the text-decoration-line, 
    - text-decoration-color, 
    - text-decoration-style and 
    - text-decoration-thickness properties. 
Let's use the same example again and define it using the individual properties:
CSS:
    p { 
      text-decoration-line: underline;
      text-decoration-color: red;
      text-decoration-style: solid;
      text-decoration-thickness: 5px;
    }

- The most common 'text-decoration-line' values used are: 
    - underline, 
    - overline, 
    - line-through and     
    - none. 
- None is the default value to use no text decoration.
- There are many styles available for the 'text-decoration-style'  property;  
    - solid,  
    - double,  
    - dotted,  
    - dashed  and  
    - wavy. 
- The 'text-decoration-style' property requires the decoration line to be defined. 
- If the decoration style is not specified, 'solid' will be used.

BOX MODEL INTRODUCTION
- Sometimes creative web development requires thinking inside the box.
- how to use the box model in CSS to create an appealing layout and allow users eyes to easily flow between content. 
- When an HTML document and CSS style sheet are downloaded, the web browser needs to know how to display the elements on the screen. 
- To do this, it allocates a rectangle or box to each element. 
- CSS rules are applied to the boxes of the elements. This is known as the "box model". 
- Every box consists of four parts. 
    - The content, 
    - the padding, 
    - the border, and finally, 
    - the margin. 
- The content is the actual content of the element, like the text or the image. Its size is known as the "content width" and "content height". 
- Browsers are clever and by default, they will calculate the width and height based on the content itself. 
- Fortunately, developers can control the size to manipulate the layout. 
- You can do this by applying CSS rules to the content, such as width, minimum width, maximum width, height, minimum height, and maximum height. 
- Let's move on to the padding. 
    - The padding extends the content size. 
    - Its size is known as the "padding box width" and the "padding box height". 
    - The thickness of the padding is determined by the padding top, padding bottom, padding left and padding right. 
    - The padding box width can be calculated as content width plus padding left side plus padding right side. 
    => padding box width = content width + padding left-side + padding right-side
    - You can calculate the padding box height by adding the content height, the padding top side and padding bottom side together. 
    => padding box height = content height + padding top-side + padding bottom-side
- Next, let me show you how you set the border. 
    - The border goes around the padding and content. Its size is known as the "border box width" and "border-box height". 
    - You can set different types of borders, such as 
        - solid border
        - dash border
        - dotted border
        - double border
    - To understand how this plays out practically, I will demonstrate the HTML, the CSS style, and the physical border. 
    - To set the border, you can write border width thin, border width medium, and border width thick. 
    CSS:
    h1{
        border-width : thin ;
    }
        h1{
        border-width : medium ;
    }
        h1{
        border-width : thick ;
    }
    - Now, let me share with you a pro developer tip to help you calculate the size of your HTML elements when working with the box model. 
    - An HTML element is equal to the size of the border box. 
    - To get the border box width, you add the padding box width plus the border left side plus the border right side. 
    => border box width = padding box width + border left-side + border right-side
                        = ( content width + padding left side + padding right side )  + border left-side + border right-side
                        = content width + padding left side + padding right side + border left-side + border right-side
    - You can calculate the border-box height by adding the padding box height and the border top side, as well as the border bottom side. 
    => border box height = padding box height + border top-side + border bottom-side
                        = ( content height + padding top-side + padding bottom-side )  + border top-side + border bottom-side
                        = content height + padding top-side + padding bottom-side  + border top-side + border bottom-side

- Lastly, let me show you how to set the margin. 
    - Following on from what you have just learned, do you have an idea of what the CSS rule might be? 
    - The margin extends the border area to separate the element from its neighboring elements. 
    - Its size is known as the "margin box width", and "margin box height". 
    - To specify the margin sides, you write, margin top, followed by the value, the margin bottom, margin-left, and margin-right follow the exact same notation. 
    CSS:
    div {
        margin-top : 4px ;
        margin-bottom : 1px ; 
        margin-left : 5px ;
        margin-right : 2px ; 
    }

    - We can also set the padding, border and margin with shorthand properties, 
    CSS shorthand properties:
    div {
        Padding : 4px 2px 1px 5px ;
        Border-with : 2px 3px 1px 4px ;
        Margin : 1px 2px 4px 5px ;
    }  
    - but more on this later. Lastly, let's calculate the size of the margin box. 
    - Can you guess how? The margin box width can be calculated by adding the border box width, the margin left side and the margin right-side together.

    => margin box width = border box width + margin left-side + margin right-side

                        = ( padding box width + border left-side + border right-side ) + margin left-side + margin right-side

                        = padding box width + border left-side + border right-side + margin left-side + margin right-side

                        = ( content width + padding left side + padding right side ) + border left-side + border right-side + margin left-side + margin right-side

                        = content width + padding left side + padding right side + border left-side + border right-side + margin left-side + margin right-side

    - To get the margin box height at the border box height, margin top side and margin bottom side together.
    => margin box height = border box height + margin top-side + margin bottom-side

                         = ( padding box height + border top-side + border bottom-side ) + margin top-side + margin bottom-side

                         = padding box height + border top-side + border bottom-side + margin top-side + margin bottom-side

                         = ( content height + padding top-side + padding bottom-side ) + border top-side + border bottom-side + margin top-side + margin bottom-side

                         = content height + padding top-side + padding bottom-side + border top-side + border bottom-side + margin top-side + margin bottom-side

    - To easily remember this, think of the content as yourself. 
    - The padding is like the thickness of your clothes. 
    - The border is like the silhouette or outline and the margin is the personal space between you and another person. 
- In this video, I've opened the box model for you. Inside it is the content and around it flows the padding, the border fits around the padding. 
- Lastly, the margin is the empty space keeping elements apart. You will work with the box model in every website you develop, so I encourage you to start practicing with it in your designs.

Q. You are busy designing a web page for a small company. They supplied you with an image that needs to be in the center on the landing page. The image has a content width of 100px, 10px padding on both left and right sides, a 10px border on both left and right sides and a 10px margin on both left and right sides. What is the border box width?
- 180px
- 140px - Correct
- 160px

Ans: border box width = content width + padding left side + padding right side + border left-side + border right-side 
                      = 100 + 10 + 10 + 10 + 10
                      = 140
Border box width = content width (100) + padding width (2x10) + border width (2x10)


DOCUMENT FLOW BLOCK VS LINE
how does the web browser nowhere to place the elements on the screen? 
- The web browsers normal way of calculating the position of html elements on the screen is called "document flow". 
- By default, nearly all html elements are organized into one of two categories namely in-block and in-line elements.
    - A block level element will occupy the full horizontal width of its parent element and the vertical height of its content. 
    - Each block level element will have a new line before and after. 
    - Therefore, multiple block level elements will stack on top of each other like a stack of boxes. 
- In line elements only occupy the width and height of their content. 
    - They don't appear on a new line, hence the name in line. 
    - Therefore, multiple in line elements can form a row of elements. 
- When coding in html, you need to be able to recognize and use block elements. 
- Some examples of block level elements include the tags, div form and heading. 
    1. <div></div>
    2. <form></form>
    3. <h1></h1> similarly 
    4. <h2></h2> 
    5. <h3></h3> 
    6. <h4></h4> and 
    7. <h5></h5>

- You also need to be familiar with common in line elements. 
- These include the tags anchor, image, input, label, bold, italics, emphasis and span.
    1. <a href="index.html"></a>
    2. <img src="photo.png">
    3. <input>
    4. <label></label> 
    5. <b></b> 
    6. <i></i> and 
    7. <em></em>
    8. <span></span>

Let me demonstrate the difference between block and in line now by using an example of an html file containing div and span elements.
I have a div element containing three sentences of Lauren ipsum. A div or divided element is used to divide content into sections. If you don't speak Latin, don't worry. Lauren Ipsum is placeholder text that has been used since the 1500s.
- Each sentence contains a span element that you may recall are in line elements.
- Notice that all text is displayed in an unbroken flow of content in the browser.
- In the code I have div and span elements. 
- I am now going to change the middle sentence from a span to a div tag. 
- Because the div tag is a block level element, notice that the sentence has been moved to a new line and the span element after it is also a new line. - -- It's possible to change elements from block level to in line and vice versa. 
- This can be done using the display CSS property.

Let me add a CSS file called style dot CSS. 
- In my html file, let me give the middle sentence div element an Id. 
- I now add a rule in the CSS file to change the element to an in line element. 
- To create the CSS rule, I type hash middle and open the curly brackets. 
- On the next line, I type display colon space in line semi colon. 
- And on the next line I close the curly brackets, notice that the div has now changed to an in line element. 
- If I want to change it back, I can just remove the property.
- I have deleted the rule in the code to change the element to an in line element. 
- Another way to achieve this outcome is to set the display property to block.
- I have now changed the value for display to block. 

- It's important to remember that block elements begin on a new line and take up the full width of the page. 
- And in line elements work within the flow of surrounding content rather than breaking onto their own line.

Q.  True or false. Inline elements appear on a new line. (False)
Ans: Inline elements only occupy the width and height of their content and they don't appear on a new line, hence the name "inline". 


ALIGNMENT BASICS
Let's explore how to align text and HTML elements using CSS.

Let's first focus on horizontal alignment. Vertical alignment is more difficult so you'll explore that later on.

Text Alignment

Aligning text within an HTML element is very simple. 
To do this, you use the 'text-align' CSS property. 

123
p {
    text-align: center;
}
Text alignment can be set to 
- left, 
- right, 
- center and 
- justify.

The 'justify' alignment spreads the text out so that every line of the text has the same width.

The default alignment is 'left' for languages that are left-to-right such as English. For right-to-left languages such as Arabic, the default alignment is 'right'.

HTML Element Alignment

HTML element alignment is more complicated than text alignment. 
To align HTML elements, you must consider the box model and document flow from previous lessons. 
Aligning an HTML element is done by changing the properties of its box model and how it impacts the document flow.

HTML Element Center Alignment

To center align an element, you set a width on the element and push its margins out to fill the remaining available space of the parent element as in the following HTML structure:
HTML:
<div class="parent">
  <div class="child">
  </div>
</div>
In your CSS, you'll set the parent element to have a red border to visualize the space it occupies:
CSS:
.parent {
  border: 4px solid red;
}
The 'child' element will have a width equal to 50% of the 'parent' element with a padding of 20 pixels. 
Note that padding: 20px is shorthand for setting the padding top, bottom, left and right to 20px. 
To visualize the space it occupies, set the border to green:
.child {
  width: 50%;
  padding: 20px;
  border: 4px solid green;
}
To align the element to the center, set its margin property to auto. 
The 'auto' will tell the browser to calculate the margin automatically based on the space available.
.child {
  width: 50%;
  padding: 20px;
  border: 4px solid green;
  margin: auto;
}
The result is the child element is centered within the parent element:

Alignment of the child in the parent element 
It is important to note that this works because the div element is a 'block-level' element.  

If you want to align an inline element like img, you will need to change it to a block-level element. Similar to the div example, you add the img to a parent element:

<div class="parent">
  <img src="photo.png" class="child">
</div>
The CSS rule then changes the img element to a block-level element and sets its margin to auto:

.child {
  display: block;
  width: 50%;
  margin: auto;
}
To be more precise, in CSS you can set only the left and right margins to auto. This allows you to set the top and bottom margins to specific values if needed.
.child {
  display: block;
  width: 50%;
  margin-left: auto;
  margin-right: auto;
}
HTML Element Left / Right Alignment

The two most common ways to left and right align elements are to use the 'float' property and the 'position' property.

The position property has several value options that impact how the element displays in the document flow. 
You'll explore how to use the position property later on. 
For now, let's focus on the float property.

The float property sets an element's position relative to the text content within a parent element. 
Text will wrap around the element.
In the following example, the image will be aligned to the right of the div element. 
The text content will wrap around the image:

HTML:
<div class="parent">
  <img src="photo.png" class="child"> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur eu odio eget leo auctor porta sit amet sit amet justo. Donec fermentum quam in diam volutpat, at lacinia diam placerat. Aenean quis feugiat sem. Suspendisse a dui massa. Phasellus scelerisque, mi vestibulum iaculis tristique, orci tellus gravida nisi, in pellentesque elit massa ut lorem. Sed elementum ornare nunc vel cursus. Duis sed enim in nulla efficitur convallis sed 
CSS: 
.child {
  float: right;
}
The following displays in the web browser:  

Knowledge check: CSS basics:
1. To reference a CSS file in an HTML document, you use the ______________ tag.
- head
- script
- style
- link - Correct

2. In the following CSS rule, the `h1` part of the rule is called the ______________.
h1 {
    color: green;
}
- Box model
- Selector - Correct
- Inheritance
- HTML

3. What is the total horizontal margin of the following CSS rule?
div {
    width: 10px;
    padding: 20px;
    margin: 40px;
}
- 10 pixels
- 30 pixels
- 80 pixels - Correct
- 70 pixels
For the given CSS rule, the total horizontal margin is the sum of the left and right margins. In this rule, the margin on the left is 40px, and the margin on the right is also 40px. Thus, the total horizontal margin is 40px (margin-left) + 40px (margin-right) = 80px.

4. Which CSS property and value change the HTML element to a block-level element?
- align-content  
- content
- list-style
- display: block - Correct

5. Which CSS property and value change the text to center alignment?
- text-align: center - Correct
- align-self   
- vertical-align   
- align-items  


STYLING A PAGE
ADDITIONAL RESOURCES
